name: Software Verification System

on:
  push:
    # tags:
      # - 'v*'
    branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  workflow_dispatch:

env:
  MSBUILD_PATH: ''

jobs:
  Build-And-Analysis:
    runs-on: windows-latest
    
    permissions:
      security-events: write
      actions: write
      contents: write

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: Coverity 라이선스 파일 생성
        shell: pwsh
        env:
          COVERITY_LICENSE_CONTENT: ${{ secrets.COVERITY_ANALYSIS_LICENSE }} # Secrets에서 라이선스 내용을 가져옵니다.
        run: |
          $licenseFileName = "license.dat"
          $licenseFilePath = "./$licenseFileName" # 현재 작업 디렉토리(리포지토리 루트)에 저장

          if ([string]::IsNullOrWhiteSpace($env:COVERITY_LICENSE_CONTENT)) {
              Write-Error "ERROR: 'COVERITY_ANALYSIS_LICENSE' secret이 비어있거나 설정되지 않았습니다."
              Write-Host "GitHub 저장소의 Settings -> Secrets and variables -> Actions 에 'COVERITY_ANALYSIS_LICENSE' secret이 올바르게 설정되어 있는지 확인하세요."
              exit 1
          }

          # 라이선스 내용을 파일에 씁니다.
          # -NoNewline을 사용하여 Secret 값 끝에 불필요한 새 줄이 추가되지 않도록 합니다.
          $env:COVERITY_LICENSE_CONTENT | Out-File -FilePath $licenseFilePath -Encoding UTF8 -NoNewline
          
          if (-not (Test-Path $licenseFilePath)) {
              Write-Error "ERROR: 라이선스 파일($licenseFilePath) 생성에 실패했습니다."
              exit 1
          }
          Write-Host "라이선스 파일($licenseFilePath)이 성공적으로 생성되었습니다."
          # 보안을 위해 라이선스 파일의 내용은 로그에 출력하지 않습니다.

          Write-Host "`n==== 생성된 라이선스 파일 확인 ===="
          # 특정 파일만 확인 (권장)
          Get-ChildItem -Path $licenseFilePath | Format-Table Name, Length, LastWriteTime -AutoSize
          # 또는 현재 디렉토리 전체 파일 목록에서 찾기
          Get-ChildItem -Path "./" -File | Where-Object {$_.Name -eq $licenseFileName} | Format-Table Name, Length, LastWriteTime -AutoSize
          Write-Host "==============================="


      - name: Coverity Installer Download from HTTP Server
        shell: pwsh
        env:
          # 여기에 실제 서버 URL 및 파일명을 입력하세요.
          INSTALLER_DOWNLOAD_URL: http://160.187.202.144/downloads/cov-analysis-win64-2024.12.1.exe 
          # 다운로드될 파일의 로컬 경로 및 이름 (워크플로우 작업 디렉토리 기준)
          LOCAL_INSTALLER_PATH: cov-analysis-win64-2024.12.1.exe 
        run: |
          # 🚨🚨 중요 경고 🚨🚨
          # 이 URL은 반드시 GitHub Actions Runner에서 접근 가능한 공개적인 URL이어야 합니다.
          # 사설 IP 주소나 내부망 도메인은 접근할 수 없어 다운로드에 실패합니다.

          $downloadUrl = "${{ env.INSTALLER_DOWNLOAD_URL }}"
          $outputPath = "${{ env.LOCAL_INSTALLER_PATH }}"
          # 다운로드될 파일의 디렉토리가 현재 워크플로우의 작업 디렉토리(리포지토리 루트)이므로 별도 생성 필요 없음
          # 만약 특정 서브폴더(예: `downloads/`)에 저장하려면:
          # $downloadDir = "downloads"
          # New-Item -ItemType Directory -Path $downloadDir -Force | Out-Null
          # $outputPath = Join-Path $downloadDir "${{ env.LOCAL_INSTALLER_PATH }}"


          Write-Host "Coverity 설치 파일 다운로드 시작..."
          Write-Host "URL: $downloadUrl"
          Write-Host "저장 위치: $outputPath"

          try {
              # Invoke-WebRequest를 사용하여 파일 다운로드
              # -Uri: 다운로드할 URL
              # -OutFile: 다운로드된 파일을 저장할 경로
              # -TimeoutSec: 다운로드 타임아웃 (초). 대용량 파일에 충분히 큰 값 설정 (예: 10분 = 600초)
              # -ErrorAction Stop: 오류 발생 시 스크립트 중단
              Invoke-WebRequest -Uri $downloadUrl -OutFile $outputPath -TimeoutSec 600 -ErrorAction Stop

              if (-not (Test-Path $outputPath)) {
                  throw "파일 다운로드에 실패했습니다. 파일이 생성되지 않았습니다."
              }
              Write-Host "`n파일 다운로드 성공!"
              Write-Host "다운로드된 파일 크기: $((Get-Item $outputPath).Length / 1MB) MB"
          }
          catch {
              Write-Error "`n파일 다운로드 중 오류 발생: $($_.Exception.Message)"
              Write-Error "URL ($downloadUrl)이 GitHub Runner에서 접근 가능한지, 또는 네트워크 문제가 없는지 확인하세요."
              exit 1
          }

          # (선택 사항: 다운로드된 파일 목록 확인)
          Write-Host "`n==== 다운로드 후 현재 디렉토리 파일 목록 ===="
          Get-ChildItem -Path "./" -File | Format-Table Name, Length, LastWriteTime -AutoSize
          Write-Host "============================"


      - name: 디스크 공간 확인 (GB 단위)
        shell: pwsh
        run: |
          Write-Host "==== 현재 러너의 디스크 공간 (GB 단위) ===="
          Get-PSDrive -PSProvider FileSystem | Select-Object Name, Root, @{Name='Free(GB)'; Expression={$_.Free / 1GB -as [int]}}, @{Name='Used(GB)'; Expression={$_.Used / 1GB -as [int]}}, @{Name='Size(GB)'; Expression={$_.Size / 1GB -as [int]}} | Format-Table -AutoSize
          Write-Host "============================================="


      - name: Coverity 설치 프로그램 실행 
        shell: pwsh
        env:
          COVERITY_ORIGINAL_INSTALLER_NAME: cov-analysis-win64-2024.12.1.exe
        run: |
          $installerPath = "./${{ env.COVERITY_ORIGINAL_INSTALLER_NAME }}" 
          
          # -----------------------------------------------------------------
          # 1. license.dat 파일의 절대 경로 구성
          # -----------------------------------------------------------------
          $currentWorkingDirectory = Get-Location # 현재 작업 디렉토리 (예: D:\a\Ctest\Ctest)
          $licenseFullAbsolutePath = Join-Path $currentWorkingDirectory "license.dat"
          
          # -----------------------------------------------------------------
          # 2. Coverity 설치 프로그램 자체 로그 파일 경로 구성
          # (이 로그 파일에 설치 실패의 가장 상세한 원인이 기록됩니다. 인자명 확인 필수!)
          # -----------------------------------------------------------------
          $coverityInstallerLogLocation = "C:\Coverity\coverity_install_verbose.log" # 설치 경로에 로그 생성
          $installerLogArgument = "--log-file=`"$coverityInstallerLogLocation`"" # 인자명과 함께 절대 경로 전달 (백틱으로 인용부호 이스케이프)

          # -----------------------------------------------------------------
          # 3. 모든 설치 인자를 하나의 문자열로 구성 (절대 경로 포함)
          # 인자에 공백이 포함될 경우를 대비하여 `"$변수명`"` (백틱과 큰따옴표) 형식으로 감쌉니다.
          # -----------------------------------------------------------------
          $installerArguments = "-q -console --installation.dir=C:\\Coverity --license.region=5 --license.agreement=agree --license.type.choice=0 --license.cov.path=`"$licenseFullAbsolutePath`" $installerLogArgument"
          
          # -----------------------------------------------------------------
          # 디버깅 출력: 최종 인자 문자열 확인 (매우 중요!)
          # -----------------------------------------------------------------
          Write-Host "DEBUG: 실행할 설치 파일 경로: $installerPath"
          Write-Host "DEBUG: 사용될 라이선스 파일 절대 경로: $licenseFullAbsolutePath"
          Write-Host "DEBUG: 사용될 설치 프로그램 상세 로그 경로: $coverityInstallerLogLocation"
          Write-Host "DEBUG: 사용될 최종 설치 인자: $installerArguments"
          Write-Host "설치 프로그램 출력이 콘솔에 직접 표시됩니다. (주의: 설치 프로그램이 콘솔 출력을 제공하지 않을 수 있습니다.)"
          
          # -----------------------------------------------------------------
          # 4. Coverity 설치 프로그램 실행 (PowerShell의 '&' 호출 연산자 사용)
          # -----------------------------------------------------------------
          try {
              & "$installerPath" $installerArguments # 직접 실행
              $exitCode = $LASTEXITCODE # 실행된 프로세스의 종료 코드를 가져옵니다.
          } catch {
              Write-Error "Coverity 설치 프로그램 호출 중 PowerShell 예외 발생: $($_.Exception.Message)"
              $exitCode = 9999
          }
          
          if ($exitCode -ne 0) {
              Write-Error "Coverity 설치 프로그램 실행 중 오류 발생. 종료 코드: $exitCode"
              
              # -----------------------------------------------------------------
              # 5. 실패 시 상세 로그 파일 내용 출력 (가장 중요!)
              # -----------------------------------------------------------------
              Write-Host "`n==== Coverity 설치 프로그램 상세 로그 파일 내용 ===="
              if (Test-Path $coverityInstallerLogLocation) {
                  Get-Content $coverityInstallerLogLocation | Write-Host
              } else {
                  Write-Host "상세 로그 파일 ($coverityInstallerLogLocation)을 찾을 수 없거나 생성되지 않았습니다."
              }
              Write-Host "===================================================="

              # (임시 폴더 로그 확인 로직 - 이전 답변에서 제공된 부분. 필요시 유지.)
              $coveritySpecificLog2 = Join-Path $env:TEMP "coverity_installer_*.log"
              Write-Host "`n==== Coverity 설치 프로그램 임시 폴더 로그 확인 ===="
              Get-ChildItem -Path $env:TEMP -Filter "coverity_installer_*.log" | ForEach-Object {
                  Write-Host "임시 폴더 로그 ($($_.FullName)) 내용:"
                  Get-Content $_.FullName | Write-Host
              } | Out-Null
              Write-Host "======================================================"
              
              exit 1 # 워크플로우를 실패 처리
          }
          Write-Host "Coverity 설치 프로그램 실행 완료."
          
          # -----------------------------------------------------------------
          # 6. 설치 후 Coverity CLI PATH 설정 및 확인
          # -----------------------------------------------------------------
          $coverityBinPath = "C:\Coverity\bin" # 인자로 지정한 설치 경로 기준
          if (Test-Path $coverityBinPath) {
              $env:PATH += ";$coverityBinPath"
              Write-Host "Coverity CLI 경로가 PATH에 추가되었습니다."
              cov-build --version # 설치 확인 명령어
          } else {
              Write-Warning "Coverity 설치 경로에 bin 폴더를 찾을 수 없어 PATH에 추가하지 못했습니다."
          }