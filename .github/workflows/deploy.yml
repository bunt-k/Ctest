name: Software Verification System

on:
  push:
    # tags:
      # - 'v*'
    branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  workflow_dispatch:

env:
  MSBUILD_PATH: ''

jobs:
  Build-And-Analysis:
    runs-on: windows-latest
    
    permissions:
      security-events: write
      actions: write
      contents: write

    steps:
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      - name: Coverity 라이선스 파일 생성
        shell: pwsh
        env:
          COVERITY_LICENSE_CONTENT: ${{ secrets.COVERITY_ANALYSIS_LICENSE }} # Secrets에서 라이선스 내용을 가져옵니다.
        run: |
          $licenseFileName = "license.dat"
          $licenseFilePath = "./$licenseFileName" # 현재 작업 디렉토리(리포지토리 루트)에 저장

          if ([string]::IsNullOrWhiteSpace($env:COVERITY_LICENSE_CONTENT)) {
              Write-Error "ERROR: 'COVERITY_ANALYSIS_LICENSE' secret이 비어있거나 설정되지 않았습니다."
              Write-Host "GitHub 저장소의 Settings -> Secrets and variables -> Actions 에 'COVERITY_ANALYSIS_LICENSE' secret이 올바르게 설정되어 있는지 확인하세요."
              exit 1
          }

          # 라이선스 내용을 파일에 씁니다.
          # -NoNewline을 사용하여 Secret 값 끝에 불필요한 새 줄이 추가되지 않도록 합니다.
          $env:COVERITY_LICENSE_CONTENT | Out-File -FilePath $licenseFilePath -Encoding UTF8 -NoNewline
          
          if (-not (Test-Path $licenseFilePath)) {
              Write-Error "ERROR: 라이선스 파일($licenseFilePath) 생성에 실패했습니다."
              exit 1
          }
          Write-Host "라이선스 파일($licenseFilePath)이 성공적으로 생성되었습니다."
          # 보안을 위해 라이선스 파일의 내용은 로그에 출력하지 않습니다.

          Write-Host "`n==== 생성된 라이선스 파일 확인 ===="
          # 특정 파일만 확인 (권장)
          Get-ChildItem -Path $licenseFilePath | Format-Table Name, Length, LastWriteTime -AutoSize
          # 또는 현재 디렉토리 전체 파일 목록에서 찾기
          # Get-ChildItem -Path "./" -File | Where-Object {$_.Name -eq $licenseFileName} | Format-Table Name, Length, LastWriteTime -AutoSize
          Write-Host "==============================="

      - name: 디스크 공간 확인 (GB 단위)
        shell: pwsh
        run: |
          Write-Host "==== 현재 러너의 디스크 공간 (GB 단위) ===="
          Get-PSDrive -PSProvider FileSystem | Select-Object Name, Root, @{Name='Free(GB)'; Expression={$_.Free / 1GB -as [int]}}, @{Name='Used(GB)'; Expression={$_.Used / 1GB -as [int]}}, @{Name='Size(GB)'; Expression={$_.Size / 1GB -as [int]}} | Format-Table -AutoSize
          Write-Host "============================================="

