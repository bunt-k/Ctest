# GitHub Actions 워크플로우 정의 파일
# 이 파일은 C++ 프로젝트의 자동화된 빌드, 테스트, 코드 분석을 수행합니다.
# 파일 위치: .github/workflows/deploy.yml

# 워크플로우의 이름을 지정합니다. 이 이름은 GitHub의 Actions 탭에서 확인할 수 있습니다.
name: Software Verification System

# 워크플로우 트리거 설정: 언제 이 워크플로우를 실행할지 정의합니다.
on:
  push:
    branches: [ "main" ] # main 브랜치에 푸시될 때 트리거
  workflow_dispatch: # GitHub 웹사이트에서 수동 실행 가능

# 전역 환경 변수 설정: 워크플로우 전체에서 사용할 수 있는 변수들을 정의합니다.
env:
  MSBUILD_PATH: '' # Visual Studio의 MSBuild.exe 경로를 저장할 변수

  # Coverity Installer 다운로드 및 캐싱 관련 설정 (여기서 URL과 파일명을 정의)
  INSTALLER_DOWNLOAD_URL: http://160.187.202.144/downloads/cov-analysis-win64-2024.12.1.exe # <-- 여기에 실제 서버 URL 입력
  INSTALLER_NAME: cov-analysis-win64-2024.12.1.exe # 다운로드/캐시/설치될 파일명 (리포지토리 루트에 저장)
  INSTALLER_VERSION: 2024.12.1 # <--- 설치 파일 버전이 바뀔 때마다 이 값을 변경 (캐시 갱신용)
  COVERITY_ORIGINAL_INSTALLER_NAME: cov-analysis-win64-2024.12.1.exe # 재조립/다운로드된 원본 설치 파일 이름 (INSTALLER_NAME과 동일)

jobs:
  Build-And-Analysis:
    runs-on: windows-latest # 최신 버전의 Windows Server를 사용
    
    # GitHub Actions가 필요로 하는 보안 권한 설정
    permissions:
      security-events: write
      actions: write
      contents: write

    # steps: 작업 내에서 순차적으로 실행될 단계들을 정의
    steps:
      # Step 1: 저장소 코드 가져오기
      - name: 코드 체크아웃
        uses: actions/checkout@v3

      # Step 2: Coverity 라이선스 파일 생성 (Secrets에서 내용 가져와 license.dat 파일 생성)
      - name: Coverity 라이선스 파일 생성
        shell: pwsh
        env:
          COVERITY_LICENSE_CONTENT: ${{ secrets.COVERITY_ANALYSIS_LICENSE }} # Secrets에서 라이선스 내용을 가져옵니다.
        run: |
          $licenseFileName = "license.dat"
          $licenseFilePath = "./$licenseFileName" # 현재 작업 디렉토리(리포지토리 루트)에 저장

          if ([string]::IsNullOrWhiteSpace($env:COVERITY_LICENSE_CONTENT)) {
              Write-Error "ERROR: 'COVERITY_ANALYSIS_LICENSE' secret이 비어있거나 설정되지 않았습니다."
              Write-Host "GitHub 저장소의 Settings -> Secrets and variables -> Actions 에 'COVERITY_ANALYSIS_LICENSE' secret이 올바르게 설정되어 있는지 확인하세요."
              exit 1
          }
          $env:COVERITY_LICENSE_CONTENT | Out-File -FilePath $licenseFilePath -Encoding UTF8 -NoNewline
          
          if (-not (Test-Path $licenseFilePath)) {
              Write-Error "ERROR: 라이선스 파일($licenseFilePath) 생성에 실패했습니다."
              exit 1
          }
          Write-Host "라이선스 파일($licenseFilePath)이 성공적으로 생성되었습니다."
          Write-Host "`n==== 생성된 라이선스 파일 확인 ===="
          Get-ChildItem -Path $licenseFilePath | Format-Table Name, Length, LastWriteTime -AutoSize
          Write-Host "==============================="


      # Step 3: Coverity Installer 캐시 복원 시도
      - name: Coverity Installer Cache 복원 시도
        id: cache-installer
        uses: actions/cache@v3
        with:
          path: ${{ env.INSTALLER_NAME }} # 캐시할 파일의 경로
          key: ${{ runner.os }}-installer-${{ env.INSTALLER_NAME }}-${{ env.INSTALLER_VERSION }} # 고유한 캐시 키
          restore-keys: | # 이전 버전의 캐시도 복원 시도 (버전 업데이트 시 새로운 캐시가 없으면 이전 캐시 사용)
            ${{ runner.os }}-installer-${{ env.INSTALLER_NAME }}-

      # Step 4: Coverity Installer 다운로드 (캐시 히트가 아닐 경우에만 실행)
      - name: Coverity Installer 다운로드 (HTTP 서버에서)
        if: steps.cache-installer.outputs.cache-hit != 'true' # 캐시 히트가 아닐 경우에만 이 스텝 실행
        shell: pwsh
        run: |
          Write-Host "캐시 히트가 아니므로 설치 파일을 다운로드합니다."
          $downloadUrl = "${{ env.INSTALLER_DOWNLOAD_URL }}"
          $outputPath = "${{ env.INSTALLER_NAME }}" # 캐시할 경로와 동일해야 함
          
          Write-Host "Coverity 설치 파일 다운로드 시작..."
          Write-Host "URL: $downloadUrl"
          Write-Host "저장 위치: $outputPath"

          try {
              Invoke-WebRequest -Uri $downloadUrl -OutFile $outputPath -TimeoutSec 600 -ErrorAction Stop
              if (-not (Test-Path $outputPath)) {
                  throw "파일 다운로드에 실패했습니다. 파일이 생성되지 않았습니다."
              }
              Write-Host "`n파일 다운로드 성공!"
              Write-Host "다운로드된 파일 크기: $((Get-Item $outputPath).Length / 1MB) MB"
          }
          catch {
              Write-Error "`n파일 다운로드 중 오류 발생: $($_.Exception.Message)"
              Write-Error "URL ($downloadUrl)이 GitHub Runner에서 접근 가능한지, 또는 네트워크 문제가 없는지 확인하세요."
              exit 1
          }
          Write-Host "`n==== 다운로드 후 현재 디렉토리 파일 목록 ===="
          Get-ChildItem -Path "./" -File | Format-Table Name, Length, LastWriteTime -AutoSize
          Write-Host "============================"

      # Step 5: 다운로드된 Installer를 캐시에 저장 (다운로드가 발생했을 경우에만)
      - name: Coverity Installer Cache 저장
        if: steps.cache-installer.outputs.cache-hit != 'true' # 다운로드했으면 캐시에 저장
        uses: actions/cache@v3
        with:
          path: ${{ env.INSTALLER_NAME }}
          key: ${{ runner.os }}-installer-${{ env.INSTALLER_NAME }}-${{ env.INSTALLER_VERSION }}

      # Step 6: 디스크 공간 확인 (GB 단위)
      - name: 디스크 공간 확인 (GB 단위)
        shell: pwsh
        run: |
          Write-Host "==== 현재 러너의 디스크 공간 (GB 단위) ===="
          Get-PSDrive -PSProvider FileSystem | Select-Object Name, Root, @{Name='Free(GB)'; Expression={$_.Free / 1GB -as [int]}}, @{Name='Used(GB)'; Expression={$_.Used / 1GB -as [int]}}, @{Name='Size(GB)'; Expression={$_.Size / 1GB -as [int]}} | Format-Table -AutoSize
          Write-Host "============================================="

      # Step 7: Coverity 설치 프로그램 실행 (지정된 인자 및 라이선스 파일 사용)
      - name: Coverity 설치 프로그램 실행
        shell: pwsh
        env:
          COVERITY_ORIGINAL_INSTALLER_NAME: cov-analysis-win64-2024.12.1.exe 
        run: |
          $installerPath = "./${{ env.COVERITY_ORIGINAL_INSTALLER_NAME }}" 
          $currentWorkingDirectory = Get-Location
          $licenseFullAbsolutePath = Join-Path $currentWorkingDirectory "license.dat"
          $licensePathArgument = "--license.cov.path=`"$licenseFullAbsolutePath`""
          
          # Coverity 설치 프로그램 자체 로그 파일 (설치 실패 시 이 로그를 확인)
          $coverityInstallerLogLocation = "C:\Coverity\coverity_install_verbose.log"
          $installerLogArgument = "--log-file=`"$coverityInstallerLogLocation`""

          $baseArguments = "-q -console --installation.dir=""C:\\Program Files\\Coverity"" --license.region=5 --license.agreement=agree --license.type.choice=0"
          $finalInstallerArguments = "$baseArguments $licensePathArgument $installerLogArgument"
          
          Write-Host "Coverity 설치 프로그램 실행 중..."
          try {
              Start-Process -FilePath "$installerPath" `
                            -ArgumentList "$finalInstallerArguments" `
                            -Wait ` # 설치 완료까지 대기
                            -PassThru `
                            | Out-Null
              $exitCode = $LASTEXITCODE
          } catch {
              Write-Error "Coverity 설치 프로그램 호출 중 PowerShell 예외 발생: $($_.Exception.Message)"
              $exitCode = 9999
          }
          
          if ($exitCode -ne 0) {
              Write-Error "Coverity 설치 프로그램 실행 중 오류 발생. 종료 코드: $exitCode"
              Write-Host "`n==== Coverity 설치 프로그램 상세 로그 파일 내용 ===="
              if (Test-Path $coverityInstallerLogLocation) { Get-Content $coverityInstallerLogLocation | Write-Host }
              else { Write-Host "상세 로그 파일 ($coverityInstallerLogLocation)을 찾을 수 없거나 생성되지 않았습니다." }
              exit 1
          }
          Write-Host "Coverity 설치 프로그램 실행 완료."
          
          # -----------------------------------------------------------------
          # Coverity CLI PATH 설정 및 확인 (이 부분이 핵심 수정 사항입니다)
          # -----------------------------------------------------------------
          $coverityInstallRoot = "C:\\Program Files\\Coverity" # 설치 경로 변수 (Installer Arguments와 일치해야 함)
          $coverityBinPath = "" # PATH에 추가할 정확한 bin 폴더 경로

          Write-Host "`n==== Coverity CLI 경로 설정 및 확인 ===="
          if (Test-Path $coverityInstallRoot) {
              # 설치 루트 폴더에서 cov-build.exe를 재귀적으로 찾아 정확한 bin 폴더 경로를 확보
              $covBuildExecutable = Get-ChildItem -Path $coverityInstallRoot -Recurse -Filter "cov-build.exe" -ErrorAction SilentlyContinue | Select-Object -First 1
              
              if ($covBuildExecutable) {
                  $coverityBinPath = $covBuildExecutable.DirectoryName # cov-build.exe가 있는 정확한 디렉토리
                  Write-Host "cov-build.exe 발견: $($covBuildExecutable.FullName)"
                  Write-Host "자동으로 찾은 Coverity CLI 경로: $coverityBinPath"
              } else {
                  Write-Warning "경고: 설치 경로 '$coverityInstallRoot' 내에서 'cov-build.exe'를 찾을 수 없습니다. 설치가 예상과 다르게 되었을 수 있습니다."
                  $coverityBinPath = Join-Path $coverityInstallRoot "bin" # 예비 경로 (설치 프로그램이 bin에 넣었다고 가정)
              }
          } else {
              Write-Error "오류: Coverity 설치 경로 '$coverityInstallRoot'를 찾을 수 없습니다. 설치가 실패했을 가능성이 높습니다."
              $coverityBinPath = Join-Path $coverityInstallRoot "bin" # 예비 경로
          }
          
          # 찾은 Coverity CLI 경로를 PATH 환경 변수에 영구적으로 추가하여 다음 스텝에서 사용 가능하게 함
          if (Test-Path $coverityBinPath) {
              echo "PATH=$env:PATH;$coverityBinPath" >> $env:GITHUB_ENV # <--- 이 라인이 PATH를 다음 스텝에 유지시킵니다.
              Write-Host "Coverity CLI 경로 '$coverityBinPath'가 PATH 환경 변수에 영구적으로 추가되었습니다."
              cov-configure --msvc # 이 스텝 내에서 CLI가 작동하는지 최종 확인
          } else {
              Write-Error "오류: Coverity CLI 경로 '$coverityBinPath'가 존재하지 않아 PATH에 추가할 수 없습니다. CLI 사용 불가."
              exit 1 # PATH 추가 실패 시 빌드 캡처 불가능하므로 실패 처리
          }
          Write-Host "============================================="

      # Step 8: Visual Studio 개발 환경 설정
      - name: Visual Studio 개발 환경 설정
        id: setup_msbuild
        uses: microsoft/setup-msbuild@v1.3.1
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true

      # Step 9: MSBuild 경로 저장
      - name: MSBuild 경로 저장
        run: |
          $msbuildPath = vswhere.exe -latest -requires Microsoft.Component.MSBuild -find MSBuild\**\Bin\MSBuild.exe
          echo "MSBUILD_PATH=$msbuildPath" >> $env:GITHUB_ENV
          Write-Host "MSBuild 경로가 설정되었습니다: $msbuildPath"
        shell: pwsh

      # Step 10: Coverity Build Capture and Solution Build (cov-build를 사용하여 빌드 캡처)
      - name: Coverity Build Capture and Solution Build
        shell: pwsh
        env:
          COVERITY_INTERMEDIATE_DIR: idir # Coverity 중간 디렉토리 이름
        run: |
          if (-not (Test-Path $env:MSBUILD_PATH)) {
            Write-Error "MSBuild 경로를 찾을 수 없습니다: $env:MSBUILD_PATH"
            exit 1
          }
          New-Item -ItemType Directory -Path $env:COVERITY_INTERMEDIATE_DIR -Force | Out-Null
          
          $buildCommandString = "`"$env:MSBUILD_PATH`" Project.sln /p:Configuration=`"Release`""
          $covBuildLogOutput = "cov_build_stdout.log"
          $covBuildLogError = "cov_build_stderr.log"

          Write-Host "Coverity 빌드 캡처 (cov-build) 실행 및 완료 대기 중..."
          try {
              # 이제 'cov-build'는 PATH에 있으므로, Start-Process에서 FilePath로 직접 이름을 사용할 수 있습니다.
              Start-Process -FilePath "cov-build" `
                            -ArgumentList @(
                                "--dir",
                                "${{ env.COVERITY_INTERMEDIATE_DIR }}",
                                $buildCommandString
                            ) `
                            -Wait `
                            -NoNewWindow `
                            -RedirectStandardOutput $covBuildLogOutput `
                            -RedirectStandardError $covBuildLogError `
                            | Out-Null
              $exitCode = $LASTEXITCODE
          } catch {
              Write-Error "cov-build 호출 중 PowerShell 예외 발생: $($_.Exception.Message)"
              $exitCode = 9999
          }
          
          if ($exitCode -ne 0) {
              Write-Error "Coverity 빌드 캡처 (cov-build) 실패. 종료 코드: $exitCode"
              if (Test-Path $covBuildLogOutput) { Write-Host "--- cov-build 표준 출력 ---"; Get-Content $covBuildLogOutput | Write-Host }
              if (Test-Path $covBuildLogError) { Write-Host "--- cov-build 표준 에러 ---"; Get-Content $covBuildLogError | Write-Host }
              exit 1
          }
          Write-Host "Coverity 빌드 캡처 및 솔루션 빌드 완료. (종료 코드: $exitCode)"
          